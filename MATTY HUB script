-- Matty Hub (Safe) - Rayfield UI with KeySystem & Theme Selector
-- Place into StarterPlayer -> StarterPlayerScripts
-- NOTE: This script intentionally does NOT include cheats/exploits (aimbot/esp/noclip/etc).
-- It demonstrates a secure Rayfield-based UI, key system, and theme switching.

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Load Rayfield (official)
local ok, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)
if not ok or not Rayfield then
    warn("Failed to load Rayfield. Make sure HTTP requests are allowed and the URL is reachable.")
    return
end

-- Simple loading notify (no animation)
Rayfield:Notify({
    Title = "Matty Hub",
    Content = "Fetching latest updates...\nChecking key...",
    Duration = 2
})

-- Create the Rayfield window with KeySystem and Discord prompt
local Window = Rayfield:CreateWindow({
    Name = "Matty Hub",
    Icon = 0, -- 0 = none
    LoadingTitle = "Matty Hub",
    LoadingSubtitle = "Checking credentials...",
    ShowText = "Matty Hub",
    Theme = "Default",
    ToggleUIKeybind = "K",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    -- Configuration saving (persist settings)
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MattyHubConfigs",
        FileName = "Default"
    },

    -- Discord join integration (shows prompt in supported executors)
    Discord = {
        Enabled = true,
        Invite = "uHC3rn6n", -- DO NOT include discord.gg/, Rayfield expects the invite code only
        RememberJoins = true
    },

    -- Enable Rayfield KeySystem (user must enter key to load UI)
    KeySystem = true,
    KeySettings = {
        Title = "Matty Hub Key",
        Subtitle = "Enter your key to continue",
        Note = "Contact the Matty Hub owner to obtain a valid key.",
        FileName = "MattyHubKey", -- saved locally by Rayfield
        SaveKey = true,
        GrabKeyFromSite = false, -- we are embedding the key below
        Key = {"Mattyhubkey123"} -- the required key(s)
    }
})

-- Simple sections and UI (no cheating features)
local mainTab = Window:CreateTab("Main", "zap")
mainTab:CreateSection("Welcome")

mainTab:CreateLabel("Welcome to Matty Hub", 0, Color3.fromRGB(240,240,240), false)
mainTab:CreateParagraph({Title = "Info", Content = "This is a safe Matty Hub build. It uses Rayfield's key system and theme switcher. No cheats are included."})

-- Settings / Theme selector
local settingsTab = Window:CreateTab("Settings", "sliders")
settingsTab:CreateSection("Theme Selector")

local themeOptions = {
    "Default - Default",
    "Amber Glow - AmberGlow",
    "Amethyst - Amethyst",
    "Bloom - Bloom",
    "Dark Blue - DarkBlue",
    "Green - Green",
    "Light - Light",
    "Ocean - Ocean",
    "Serenity - Serenity"
}

local themeDropdown = settingsTab:CreateDropdown({
    Name = "Theme - Name (Identifier)",
    Options = themeOptions,
    CurrentOption = {"Default - Default"},
    MultipleOptions = false,
    Flag = "ThemeDropdown",
    Callback = function(opt)
        local sel = opt and opt[1] or "Default - Default"
        local id = sel:match("%-%s*(%S+)%s*$") or "Default"
        id = id:gsub("%s+", "") -- strip spaces
        -- Use Rayfield API to change theme live
        if Window.ModifyTheme then
            pcall(function() Window:ModifyTheme(id) end)
        elseif Rayfield.ModifyTheme then
            pcall(function() Rayfield:ModifyTheme(id) end)
        else
            warn("ModifyTheme API not detected. Theme change may not be supported in this Rayfield version.")
        end
        Rayfield:Notify({Title="Theme", Content="Applied theme: "..sel, Duration=2})
    end
})

-- Small utilities
settingsTab:CreateButton({
    Name = "Reset UI Configuration",
    Callback = function()
        -- Resetting is done by clearing config file (Rayfield will create fresh defaults next load).
        -- Rayfield exposes functions to clear config only in some forks; if not available, we notify.
        if Rayfield.DeleteConfiguration then
            pcall(function() Rayfield:DeleteConfiguration() end)
            Rayfield:Notify({Title="Config", Content="Configuration removed. Reload the script to start fresh.", Duration=3})
        else
            Rayfield:Notify({Title="Config", Content="Reset not supported by Rayfield build. Manually delete configs.", Duration=3})
        end
    end
})

-- Small Discord label + button in Settings (in case Discord integration isn't automatic)
settingsTab:CreateLabel("Discord: https://discord.gg/uHC3rn6n", 0, nil, false)

-- Provide a simple "About" tab
local aboutTab = Window:CreateTab("About", "info")
aboutTab:CreateSection("About Matty Hub")
aboutTab:CreateParagraph({Title = "Matty Hub", Content = "Matty Hub (safe edition) â€” uses Rayfield UI. This edition intentionally omits any exploit features. Use it for legitimate admin tools or UI design."})

-- Load saved configuration (Rayfield handles flags)
Rayfield:LoadConfiguration()

-- Final notification
Rayfield:Notify({
    Title = "Matty Hub",
    Content = "Ready. Use your key to access features.",
    Duration = 3
})
